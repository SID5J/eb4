"""
Batch Converter - Convers√£o em lote de m√∫ltiplos PDFs
Linha de comando para automa√ß√£o
"""

import argparse
import sys
from pathlib import Path
from typing import List
import time
from datetime import datetime

from pdf_extractor import PDFExtractor
from html_generator import HTMLGenerator


class BatchConverter:
    """Conversor em lote de PDFs"""
    
    def __init__(self, method="auto", theme="premium", verbose=True):
        self.method = method
        self.theme = theme
        self.verbose = verbose
        self.stats = {
            'total': 0,
            'success': 0,
            'failed': 0,
            'skipped': 0,
            'start_time': None,
            'end_time': None
        }
    
    def log(self, message, level="info"):
        """Logger condicional"""
        if not self.verbose:
            return
        
        icons = {
            'info': '‚ÑπÔ∏è',
            'success': '‚úì',
            'warning': '‚ö†Ô∏è',
            'error': '‚ùå'
        }
        
        icon = icons.get(level, '‚ÑπÔ∏è')
        print(f"{icon} {message}")
    
    def find_pdfs(self, directory: Path, recursive=False) -> List[Path]:
        """Encontra todos os PDFs em um diret√≥rio"""
        pattern = "**/*.pdf" if recursive else "*.pdf"
        return list(directory.glob(pattern))
    
    def convert_file(self, pdf_path: Path, output_dir: Path = None) -> bool:
        """Converte um √∫nico arquivo"""
        try:
            self.log(f"Processando: {pdf_path.name}", "info")
            
            # Extrair dados
            extractor = PDFExtractor(method=self.method, log_callback=None)
            pages_data = extractor.extract(pdf_path)
            
            if not pages_data:
                self.log(f"  Nenhum dado extra√≠do de {pdf_path.name}", "warning")
                return False
            
            # Gerar HTML
            generator = HTMLGenerator(
                theme=self.theme,
                include_toc=True,
                responsive=True,
                animations=True,
                dark_mode=True
            )
            html_content = generator.generate(pages_data)
            
            # Determinar caminho de sa√≠da
            if output_dir:
                output_dir.mkdir(parents=True, exist_ok=True)
                output_path = output_dir / f"{pdf_path.stem}.html"
            else:
                output_path = pdf_path.parent / f"{pdf_path.stem}.html"
            
            # Salvar
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            self.log(f"  ‚úì Salvo: {output_path.name}", "success")
            return True
        
        except Exception as e:
            self.log(f"  ‚ùå Erro: {str(e)}", "error")
            return False
    
    def convert_batch(self, pdf_files: List[Path], output_dir: Path = None, 
                     overwrite=False):
        """Converte m√∫ltiplos arquivos"""
        
        self.stats['total'] = len(pdf_files)
        self.stats['start_time'] = time.time()
        
        self.log(f"\n{'='*70}", "info")
        self.log(f"  CONVERS√ÉO EM LOTE - {self.stats['total']} arquivo(s)", "info")
        self.log(f"{'='*70}\n", "info")
        
        for i, pdf_path in enumerate(pdf_files, 1):
            self.log(f"[{i}/{self.stats['total']}] {pdf_path.name}", "info")
            
            # Verificar se j√° existe
            if output_dir:
                output_path = output_dir / f"{pdf_path.stem}.html"
            else:
                output_path = pdf_path.parent / f"{pdf_path.stem}.html"
            
            if output_path.exists() and not overwrite:
                self.log(f"  ‚è≠Ô∏è J√° existe (use --overwrite para substituir)", "warning")
                self.stats['skipped'] += 1
                continue
            
            # Converter
            if self.convert_file(pdf_path, output_dir):
                self.stats['success'] += 1
            else:
                self.stats['failed'] += 1
            
            print()  # Linha em branco entre arquivos
        
        self.stats['end_time'] = time.time()
        self.print_summary()
    
    def print_summary(self):
        """Imprime resumo da convers√£o"""
        duration = self.stats['end_time'] - self.stats['start_time']
        
        print("\n" + "="*70)
        print("  üìä RESUMO DA CONVERS√ÉO")
        print("="*70)
        print(f"\n  Total processado:  {self.stats['total']}")
        print(f"  ‚úì Sucesso:         {self.stats['success']}")
        print(f"  ‚ùå Falhas:          {self.stats['failed']}")
        print(f"  ‚è≠Ô∏è Ignorados:       {self.stats['skipped']}")
        print(f"\n  ‚è±Ô∏è Tempo total:     {duration:.2f}s")
        print(f"  üìà M√©dia:          {duration/self.stats['total']:.2f}s por arquivo")
        print("\n" + "="*70 + "\n")


def main():
    """Fun√ß√£o principal com argumentos de linha de comando"""
    
    parser = argparse.ArgumentParser(
        description="PDF to HTML Batch Converter",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  
  # Converter todos PDFs no diret√≥rio atual
  python batch_converter.py
  
  # Converter PDFs de uma pasta espec√≠fica
  python batch_converter.py --input /caminho/para/pdfs
  
  # Converter recursivamente (incluindo subpastas)
  python batch_converter.py --input /caminho --recursive
  
  # Especificar pasta de sa√≠da
  python batch_converter.py --input pdfs/ --output html/
  
  # Usar tema espec√≠fico
  python batch_converter.py --theme medical
  
  # Usar m√©todo de extra√ß√£o espec√≠fico
  python batch_converter.py --method camelot
  
  # Sobrescrever arquivos existentes
  python batch_converter.py --overwrite
  
  # Modo silencioso (sem verbose)
  python batch_converter.py --quiet
        """
    )
    
    parser.add_argument(
        '-i', '--input',
        type=str,
        default='.',
        help='Diret√≥rio de entrada com PDFs (padr√£o: diret√≥rio atual)'
    )
    
    parser.add_argument(
        '-o', '--output',
        type=str,
        help='Diret√≥rio de sa√≠da para HTMLs (padr√£o: mesmo do PDF)'
    )
    
    parser.add_argument(
        '-m', '--method',
        choices=['auto', 'camelot', 'pdfplumber', 'pymupdf'],
        default='auto',
        help='M√©todo de extra√ß√£o (padr√£o: auto)'
    )
    
    parser.add_argument(
        '-t', '--theme',
        choices=['premium', 'medical', 'modern', 'classic'],
        default='premium',
        help='Tema do HTML (padr√£o: premium)'
    )
    
    parser.add_argument(
        '-r', '--recursive',
        action='store_true',
        help='Buscar PDFs recursivamente em subpastas'
    )
    
    parser.add_argument(
        '--overwrite',
        action='store_true',
        help='Sobrescrever arquivos HTML existentes'
    )
    
    parser.add_argument(
        '-q', '--quiet',
        action='store_true',
        help='Modo silencioso (menos mensagens)'
    )
    
    parser.add_argument(
        '--version',
        action='version',
        version='PDF Converter Pro 2.0'
    )
    
    args = parser.parse_args()
    
    # Validar diret√≥rio de entrada
    input_dir = Path(args.input).resolve()
    if not input_dir.exists():
        print(f"‚ùå Erro: Diret√≥rio n√£o encontrado: {input_dir}")
        sys.exit(1)
    
    if not input_dir.is_dir():
        print(f"‚ùå Erro: {input_dir} n√£o √© um diret√≥rio")
        sys.exit(1)
    
    # Preparar diret√≥rio de sa√≠da
    output_dir = Path(args.output).resolve() if args.output else None
    
    # Criar conversor
    converter = BatchConverter(
        method=args.method,
        theme=args.theme,
        verbose=not args.quiet
    )
    
    # Buscar PDFs
    pdf_files = converter.find_pdfs(input_dir, args.recursive)
    
    if not pdf_files:
        print(f"‚ùå Nenhum arquivo PDF encontrado em: {input_dir}")
        sys.exit(1)
    
    # Converter
    try:
        converter.convert_batch(pdf_files, output_dir, args.overwrite)
    except KeyboardInterrupt:
        print("\n\n‚ùå Convers√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
